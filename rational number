#include <iostream>
#include <stdexcept>

class Fraction {
private:
    int numerator;
    int denominator;
public:
    Fraction(int num = 0, int den = 1) {
        if (den == 0) {
            throw std::invalid_argument("Denominator cannot be zero.");
        }
        numerator = num;
        denominator = den;
    }
    
    Fraction operator+(const Fraction& other) const {
        int num = numerator * other.denominator + other.numerator * denominator;
        int den = denominator * other.denominator;
        return Fraction(num, den);
    }
    
    Fraction operator-(const Fraction& other) const {
        int num = numerator * other.denominator - other.numerator * denominator;
        int den = denominator * other.denominator;
        return Fraction(num, den);
    }
    
    Fraction operator*(const Fraction& other) const {
        int num = numerator * other.numerator;
        int den = denominator * other.denominator;
        return Fraction(num, den);
    }
    
    Fraction operator/(const Fraction& other) const {
        if (other.numerator == 0) {
            throw std::invalid_argument("Cannot divide by zero.");
        }
        int num = numerator * other.denominator;
        int den = denominator * other.numerator;
        return Fraction(num, den);
    }
    
    bool operator<(const Fraction& other) const {
        return numerator * other.denominator < other.numerator * denominator;
    }
    
    bool operator<=(const Fraction& other) const {
        return numerator * other.denominator <= other.numerator * denominator;
    }
    
    bool operator>(const Fraction& other) const {
        return numerator * other.denominator > other.numerator * denominator;
    }
    
    bool operator>=(const Fraction& other) const {
        return numerator * other.denominator >= other.numerator * denominator;
    }
    
    bool operator==(const Fraction& other) const {
        return numerator == other.numerator && denominator == other.denominator;
    }
    
    bool operator!=(const Fraction& other) const {
        return !(*this == other);
    }
    
    friend std::ostream& operator<<(std::ostream& os, const Fraction& frac) {
        os << frac.numerator;
        if (frac.denominator != 1) {
            os << "/" << frac.denominator;
        }
        return os;
    }
};

int main() {
    try {
        Fraction f1(3, 4);
        Fraction f2(5, 6);
        std::cout << "f1: " << f1 << "\n";
        std::cout << "f2: " << f2 << "\n";
        std::cout << "f1 + f2: " << (f1 + f2) << "\n";
        std::cout << "f1 - f2: " << (f1 - f2) << "\n";
        std::cout << "f1 * f2: " << (f1 * f2) << "\n";
        std::cout << "f1 / f2: " << (f1 / f2) << "\n";
        std::cout << "f1 == f2: " << (f1 == f2) << "\n";
        std::cout << "f1 < f2: " << (f1 < f2) << "\n";
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
    }
    return 0;
}
