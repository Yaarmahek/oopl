#include <iostream>
#include <string>
#include <stdexcept>
using namespace std;

class Student {
private:
    string name;
    int rollNumber;
    string className;
    char division;
    string dob;
    string bloodGroup;
    string address;
    string telephone;
    string drivingLicense;

    static int studentCount; // Static member to keep track of the number of students

public:
    // Default Constructor
    Student()
        : name(""), rollNumber(0), className(""), division('A'), dob(""), bloodGroup(""),
          address(""), telephone(""), drivingLicense("") {
        studentCount++;
    }

    // Parameterized Constructor
    Student(const string& n, int r, const string& cls, char div, const string& d,
            const string& bg, const string& addr, const string& tel, const string& dl)
        : name(n), rollNumber(r), className(cls), division(div), dob(d),
          bloodGroup(bg), address(addr), telephone(tel), drivingLicense(dl) {
        studentCount++;
    }

    // Copy Constructor
    Student(const Student& other)
        : name(other.name), rollNumber(other.rollNumber), className(other.className),
          division(other.division), dob(other.dob), bloodGroup(other.bloodGroup),
          address(other.address), telephone(other.telephone), drivingLicense(other.drivingLicense) {
        studentCount++;
    }

    // Destructor
    ~Student() {
        studentCount--;
    }

    // Static Member Function
    static int getStudentCount() {
        return studentCount;
    }

    // Member Function to Input Student Details
    void input() {
        cout << "Enter Name: ";
        cin >> ws;
        getline(cin, name);
        cout << "Enter Roll Number: ";
        cin >> rollNumber;
        cout << "Enter Class: ";
        cin >> ws;
        getline(cin, className);
        cout << "Enter Division: ";
        cin >> division;
        cout << "Enter Date of Birth (dd/mm/yyyy): ";
        cin >> ws;
        getline(cin, dob);
        cout << "Enter Blood Group: ";
        cin >> bloodGroup;
        cout << "Enter Address: ";
        cin >> ws;
        getline(cin, address);
        cout << "Enter Telephone: ";
        cin >> telephone;
        cout << "Enter Driving License Number: ";
        cin >> ws;
        getline(cin, drivingLicense);
    }

    // Member Function to Display Student Details
    void display() const {
        cout << "Name: " << name << endl;
        cout << "Roll Number: " << rollNumber << endl;
        cout << "Class: " << className << endl;
        cout << "Division: " << division << endl;
        cout << "Date of Birth: " << dob << endl;
        cout << "Blood Group: " << bloodGroup << endl;
        cout << "Address: " << address << endl;
        cout << "Telephone: " << telephone << endl;
        cout << "Driving License Number: " << drivingLicense << endl;
    }

    // Friend Function (Example)
    friend void showStudent(const Student& student);

    // Inline Function to Compare Roll Numbers
    inline bool compareRollNumber(int r) const {
        return this->rollNumber == r;
    }
};

// Static member initialization
int Student::studentCount = 0;

// Friend Function Definition
void showStudent(const Student& student) {
    cout << "Displaying using Friend Function:" << endl;
    student.display();
}

// Main Function
int main() {
    try {
        int n;
        cout << "Enter the number of students: ";
        cin >> n;

        if (n <= 0) throw invalid_argument("Number of students must be positive.");

        Student* students = new Student[n]; // Dynamic memory allocation

        for (int i = 0; i < n; i++) {
            cout << "\nEntering details for student " << i + 1 << ":" << endl;
            students[i].input();
        }

        cout << "\nDisplaying student details:\n";
        for (int i = 0; i < n; i++) {
            cout << "\nStudent " << i + 1 << ":" << endl;
            students[i].display();
        }

        // Using Friend Function
        cout << "\nUsing friend function to display first student:" << endl;
        showStudent(students[0]);

        // Displaying total number of students
        cout << "\nTotal Students: " << Student::getStudentCount() << endl;

        delete[] students; // Free allocated memory

    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
